[{
    "question": "## Palindrome Check\n _A palindrome is a word, number, or a phrase that reads the same forwards as well as backward, for instance “kayak”, “1001”, “Was it a cat I saw?”, or “ABBA_ \n ### Assignment\n Write a function _isPalindrome_ which return string: _Palindrome!_ in case that string passed as a parameter to function is a palindrome. Otherwise function will return string: _Not a Palindrome!_ if string is not a palindrome. \n #### Example input 1\n ```\nkayak\n```\n #### Example output 1\n ```\nPalindrome!\n```\n #### Example input 2\n ```\nkayaking\n```\n #### Example output 2\n ```\nNot a Palindrome!\n```\n ___\n",
    "snippets": [
      {
        "language": "63",
        "snippet": "function isPalindrome (str) {\n  //YOUR CODE ANSWER\n}\n\nconst fs = require('fs');\nconst stdinBuffer = fs.readFileSync(0);\nconst str = stdinBuffer.toString();\n\nconsole.log(isPalindrome(str));"
      },
      {
        "language":"68",
        "snippet": "<?php \nfunction isPalindrome($str) {\n  // YOUR CODE ANSWER HERE\n}\n\n$str = trim(fgets(STDIN)); \n$result = isPalindrome($str);\necho $result;\n?>\n"
      },
      {
        "language": "71",
        "snippet": "def isPalindrome(str):\n    # your code answer here\n \nstr = input()\nresult = isPalindrome(str)\n\nprint(result)"
      },
      {
        "language": "62",
        "snippet": "import java.util.Scanner;\n\nclass Main {\n  static String isPalindrome(String str) {\n    // YOUR CODE ANSWER HERE\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    String str = scanner.next();\n    scanner.close();\n    \n    String result = isPalindrome(str);\n    System.out.print(result);\n  }\n}"
      }
    ],
    "tests": [
      {
        "text": "Example Test 1",
        "testType": "example",
        "input": "kayak",
        "output": "Palindrome!",
        "score": 1
      },
      {
        "text": "Example Test 2",
        "testType": "example",
        "input": "kayaking",
        "output": "Not a Palindrome!",
        "score": 1
      },
      {
        "text": "Basic Correctness Test 1",
        "testType": "basic",
        "input": "aa",
        "output": "Palindrome!",
        "score": 10
      },
      {
        "text": "Basic Correctness Test 2",
        "testType": "basic",
        "input": "ab",
        "output": "Not a Palindrome!",
        "score": 10
      },
      {
        "text": "Basic Correctness Test 3",
        "testType": "basic",
        "input": "aba",
        "output": "Palindrome!",
        "score": 10
      },
      {
        "text": "Basic Correctness Test 4",
        "testType": "basic",
        "input": "abc",
        "output": "Not a Palindrome!",
        "score": 10
      },
      {
        "text": "Basic Correctness Test 5",
        "testType": "basic",
        "input": "",
        "output": "Palindrome!",
        "score": 5
      },
      {
        "text": "Basic Correctness Test 6",
        "testType": "basic",
        "input": "a",
        "output": "Palindrome!",
        "score": 5
      },
      {
        "text": "Advanced Correctness Test 1",
        "testType": "advanced",
        "input": "redder",
        "output": "Palindrome!",
        "score": 10
      },
      {
        "text": "Advanced Correctness Test 2",
        "testType": "advanced",
        "input": "renter",
        "output": "Not a Palindrome!",
        "score": 10
      },
      {
        "text": "Advanced Correctness Test 3",
        "testType": "advanced",
        "input": "racecar",
        "output": "Palindrome!",
        "score": 10
      },
      {
        "text": "Advanced Correctness Test 4",
        "testType": "advanced",
        "input": "banana",
        "output": "Not a Palindrome!",
        "score": 10
      },
      {
        "text": "Memory Test 1",
        "testType": "memory",
        "input": "some very long input",
        "output": "0",
        "score": 10
      },
      {
        "text": "Performance Test 1",
        "testType": "performance",
        "input": "some very long input",
        "output": "0",
        "score": 10
      }
    ]
  },
  {
    "question": "## Node JS current working directory\n Write a command to get current working directory using nodejs version 12",
    "snippets": [
      {
        "language": "63",
        "snippet": "// Documentation Hint:\n// https://nodejs.org/docs/latest-v12.x/api/fs.html\n\nconst array1 = [1, 4, 9, 16];\n\nconst factorialMap = //YOUR CODE ANSWER HERE;\n\nconsole.log(factorialMap)"
      }
    ],
    "tests": [
      {
        "text": "Basic Correctness Test 1",
        "testType": "basic",
        "input": "",
        "output": "/box",
        "score": 10
      }
    ]
  },
  {
    "question": "## Javascript Factorial Map\nWrite a map function _factorial_ which return array of factorials for passed integer array argument _arrayOfNumbers_\n  #### Example input 1\n ```\n1,2\n```\n #### Example output 1\n ```\n1,2\n```\n #### Example input 2\n ```\n1,2,3,7\n```\n #### Example output 2\n ```\n1,2,6,5040\n```\n ___\n",
    "snippets": [
      {
        "language": "63",
        "snippet": "const fs = require('fs');\nconst stdinBuffer = fs.readFileSync(0);\nconst str = stdinBuffer.toString();\n\nconst arrayOfNumbers = str.split(',').map(i=>Number(i));\n\nconst factorial = //YOUR CODE ANSWER HERE;\n\nconsole.log(factorial.toString())"
      }
    ],
    "tests": [
      {
        "text": "Example Test 1",
        "testType": "example",
        "input": "1,2",
        "output": "1,2",
        "score": 10
      },
      {
        "text": "Example Test 2",
        "testType": "example",
        "input": "1,2,3,7",
        "output": "1,2,6,5040",
        "score": 10
      },
      {
        "text": "Basic Correctness Test 1",
        "testType": "basic",
        "input": "1,2,3,4,5,6,7,8,9",
        "output": "1,2,6,24,120,720,5040,40320,362880",
        "score": 10
      }
    ]
  }
]
